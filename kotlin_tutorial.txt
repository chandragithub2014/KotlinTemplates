What is Kotlin?
Kotlin is a open source programming language introduced by JetBrains, the official designer of the most intelligent Java IDE, named Intellij IDEA.
This is a strongly statically typed language that runs on JVM.
In 2017, Google announced Kotlin as an official language for android development.


Advantages of Kotlin:

(1)Easy Language
  
   Kotlin is a functional language and very easy to learn. 
   The syntax is pretty much similar to Java, hence it is very easy to remember. 
   Kotlin is more expressive, which makes your code more readable and understandable.

(2)Concise
   Kotlin is based on JVM and it is a functional language. 
   It reduce lots of boiler plate code used in other programming languages.


(3)Brand New
   Kotlin is a brand new language that gives developers a fresh start. It is not a replacement of Java, though it is developed over JVM. It is accepted as the first official language of android development. Kotlin can be defined as - Kotlin = JAVA + extra updated new features.


(4)Runtime and Performance

(5)Interoperability



Class Declaration in Kotlin:


In Java:

class MyClass {
  private  String name = "Hello World";

public void printName(){
System.out.print(name);
}
  public static void main(String[] args){ 
      MyClass myClass = new MyClass();
     myClass.printName();
    }
}

Kotlin:

class MyClass{  

  private var name:String = "Hello World"

      fun printName(){ 
             print(name)
            }

fun main(args: Array<String>) {
   val obj = myClass() // create obj object of myClass class
   obj.printMe()
}
}



Difference:

Variable Declaration in Kotlin:

       var variableName:variableType

Instance creation do not require new keyboard as in Java


Variable Declaration in Kotlin:
2 Types:
(1) Using 'var'  : Variable declared using Var can be edited .

(2) Using 'val'  : Variable declared using Val can't be edited .Its Read only


Constructors in Kotlin:
A kotlin class can have single Primary Constructor and multiple secondary constructors.

primary constructor can be declared at class header level

Ex: class Employee(val firstName: String, var age: Int) {
   // class body
}

Secondary Constructor
=====================
secondary constructor is created using the “constructor” keyword.
Required whenever you want to create more than one constructor in Kotlin.
Any number of secondary constructors can be created, however, all of those constructors should call the primary constructor directly or indirectly.

Example:
//Primary Constructor
class HUman(val firstName: String, var age: Int) {
        val message:String  = "Hello!!!"
}

Initialization code in Primary Constructor can be done using init block
class HUman(val firstName: String, var age: Int) {
       
init{
     print("FirstName==$firstName")
}
}
   
   //Secondary Constructor
   constructor(name : String , age :Int ,message :String):this(name,age) {
   }
}





Constructor Overriding:
=========================
class Log {
    constructor(data: String) {
        // some code
    }
    constructor(data: String, numberOfData: Int) {
        // some code
    }
}



class Log {
    constructor(data: String) {
        // code
    }
    constructor(data: String, numberOfData: Int) {
        // code
    }
}

class AuthLog: Log {
    constructor(data: String): super(data) {
        // code
    }
    constructor(data: String, numberOfData: Int): super(data, numberOfData) {
        // code
    }
}




In Kotlin, you can also call a constructor from another constructor of the same class (like in Java) using this().
class AuthLog: Log {
    constructor(data: String): this(data, 10) {
        // code
    }
    constructor(data: String, numberOfData: Int): super(data, numberOfData) {
        // code
    }
}




By default, classes in Kotlin are final.
 If you are familiar with Java, you know that a final class cannot be subclassed. 
By using the open annotation on a class, compiler allows you to derive new classes from it.


Example Inheritence:
open class Person(age: Int) {
    // code for eating, talking, walking
}

class MathTeacher(age: Int): Person(age) {
    // other features of math teacher
}

class Footballer(age: Int): Person(age) {
    // other features of footballer
}

class Businessman(age: Int): Person(age) {
    // other features of businessman
}




open class Person(age: Int, name: String) {
    init {
        println("My name is $name.")
        println("My age is $age")
    }
}

class MathTeacher(age: Int, name: String): Person(age, name) {

    fun teachMaths() {
        println("I teach in primary school.")
    }
}

class Footballer(age: Int, name: String): Person(age, name) {
    fun playFootball() {
        println("I play for LA Galaxy.")
    }
}

fun main(args: Array<String>) {
    val t1 = MathTeacher(25, "Jack")
    t1.teachMaths()

    println()

    val f1 = Footballer(29, "Christiano")
    f1.playFootball()
}


Kotlin Data Class:
There may arise a situation where you need to create a class solely to hold data.
In such cases, you can mark the class as data to create a data class.
Data Classes are immutable.
Although the properties of a data class can be mutable (declared using var), It’s strongly recommended to use immutable properties (declared using val) so as to keep the instances of the data class immutable.

For this class, the compiler automatically generates:

- copy() function, equals() and hashCode() pair, and toString() form of the primary constructor
- componentN() functions


Example of Data Class:

data class Student(val name: String, val place: String, var age: Int)

Creating an Instance of a Data Class
val student: Student = Student("John", "New York", 20)


We can now access the members of Student:
print(student.name) // "John"
print(student.place) // "New York"
print(student.age) // 20




print the contents of the Data class using "toString()" method:
print(student.toString())


Copy() Function:
Since our data classes are immutable, we must create a copy if we wish to change some data.
if we wish to change the age of a student, this can be done by writing:
val student: Student = Student("John", "New York", 20)
val modifiedStudent = student.copy(age = 10)




Kotlin Important Points:
https://www.journaldev.com/20567/kotlin-interview-questions



Kotlin Print statements:
println("Hello world")

var name = "Keving"
println("Name is ${q.name}")
println("Name is $name")

No need to explicitly specify a class or function as public in Kotlin as public is default in Kotlin.

Kotlin supports higher order functions

Make a variable accept null by declaring as below:
var answer:String?= null
Declaring a question mark will allow answer to accept null value.

val q:Question?=Question()
q?.Answer= "42"




When:
Kotlin does not come with 'switch' statement instead it uses 'when' statement.
Example:
fun printResult(){   
    when(Answer){  
         CorrectAnswer -> print("You were correct")
         else -> print("Try again?")
        }
   
}


For Loop:
Range of values 
var myValues = 1..10
for(i in 1..10){ 
println(i)
 }

for(i in 1..10 step 2){ 
print(i)
}


for(i in 10 downTo 1 step 2){
print(i)
}

for(i in 1 until 10){
print(i)    ///will print 1 to 9
}




Declaring List in Kotlin
var numbers = listOf(1,2,3,4,5)
for(i in numbers){
print(i) }



Iterating over map in Kotlin through "for" loop
var ages = TreeeMap<String,Int>()
ages["Kevin"] = 55
ages["peer"] = 54

for((name,age) in ages){
    print("$name is $age)

}




Funtions:

Function Expressions
fun max(a:Int,b:Int):Int = if(a > b) a else b


Named Paramters functions

fun connect(a:Int,b:Int){ }

fun(a=2,b=3)  or fun(b=10 ,a=1)



Extension Functions:
Can 'add' funtions to classes not owned by you.

Infix funtions:
Member or extension functions
Have a single parameter
Marked with infix keyword.

infix fun Header.plus(Header other):Header {...}


Example:
class Header(var name:String) {}
infix fun Header.plus(other:Header):Header{ 
  return Header(this.name + other.name)

}

fun main(){
val h1 = Header("h1")
val h2 = Header("h2")
val h3 = h1 plus h2
println(h3.name)
}


Operator overloading:

class Header(var name:String) {}
operator infix fun Header.plus(other:Header):Header{ 
  return Header(this.name + other.name)

}
fun main(){
val h1 = Header("h1")
val h2 = Header("h2")
val h3 = h1 plus h2
println(h3.name)
val h4 = h2 + h1
print(h4.name)
}



Tail Recursive Funtions:

Functions calling itself.
use tailrec keyword. Prevents from stack overflow.
Have correct 'form'

Example:
tailrec fun fib(n:Int,a:BigInteger,b:BigInteger): BigInteger{

return if(n==0) b else fib(n-1,a+b,a)
}


Classes:

Classes in Kotlin are by defualt public and final. Hence cannot be derived from

* use open to show class can be derived from
* use open to show function can be derived from.


Example:
open class Student : Person() {

   open fun getClasses(){}
}



Sealed Classes:
Used to restrict class Hierarchies.
'Enums on steroids'


SingleTon:
To create a singleton class we use 'object' keyword
use 'companion object' to add static methods to the class.


High Level Functions:

Strategy PAttern   - 1
Creating a annonymous classses in Kotlin is done using "object"
Suppose we have an interface:
interface process{
     fun execute(value:Int)   
}

class Program{
 fun someProcess(limit:Int,action:process){ }
}

//calling
var program = Program()
program.someProcess ((8,obect:Process{
    over fun execute(value:Int){

      prntln(val)
}
})







Strategy PAttern   - 2
var program = Program()
program.someProcess(8, {n->print(n)})

interface process{ 
   fun execute(value:Int)
}


class Program  {
    fun calc(limit:Int,action:(Int)-> Unit){

}

}



Strategy-3
When the function takes only single parameter
calculateResult(1,2,{print(it)})



With and apply:
Used to make certain operations more naturally.

With Example:

class Meeting {
  var Title:String  = ""
  var who = mutableListOf<String>()

fun create(){}
}


fun main(args:Array<String>){
val m = Meeting()
with(m){
Title = "Meeting"
who.add("evina")


} 


//Apply 
m.apply{
  Title = "Meeting"
who.add("evina")
}.create()

}




Filtering and Sorting in Kotlin:
val ints = listOf(1,2,3,4,5,6)
val smallInts = ints.filter{it < 4}
for(i:Int in smallInts) print(i)

val squaredInts = ints.map{it*it}
for(i:Int in smallInts) print(i)


val meetings = ListOf(Meeting(1,"First"),Meeting(2,"CSecond"))
val title:List<String>=
 meetings.filter{it->it.title.startsWith("C")}
         .map{m->m.title}

for(i in title)
   print(i)


Predicates
val ints  = listOf(1,2,3,4,5)
val bigInts = ints.all{it>3}
//Predicate all returns boolean that specifies whether all elements in list are greater than 3
print(bigInts) //Returns false.
bigInts  = ints.any{it>3}
print(bigInts) // Returns true





 