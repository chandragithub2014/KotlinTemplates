What is Kotlin?
Kotlin is a open source programming language introduced by JetBrains, the official designer of the most intelligent Java IDE, named Intellij IDEA.
This is a strongly statically typed language that runs on JVM.
In 2017, Google announced Kotlin as an official language for android development.


Advantages of Kotlin:

(1)Easy Language
  
   Kotlin is a functional language and very easy to learn. 
   The syntax is pretty much similar to Java, hence it is very easy to remember. 
   Kotlin is more expressive, which makes your code more readable and understandable.

(2)Concise
   Kotlin is based on JVM and it is a functional language. 
   It reduce lots of boiler plate code used in other programming languages.


(3)Brand New
   Kotlin is a brand new language that gives developers a fresh start. It is not a replacement of Java, though it is developed over JVM. It is accepted as the first official language of android development. Kotlin can be defined as - Kotlin = JAVA + extra updated new features.


(4)Runtime and Performance

(5)Interoperability



Class Declaration in Kotlin:


In Java:

class MyClass {
  private  String name = "Hello World";

public void printName(){
System.out.print(name);
}
  public static void main(String[] args){ 
      MyClass myClass = new MyClass();
     myClass.printName();
    }
}

Kotlin:

class MyClass{  

  private var name:String = "Hello World"

      fun printName(){ 
             print(name)
            }

fun main(args: Array<String>) {
   val obj = myClass() // create obj object of myClass class
   obj.printMe()
}
}



Difference:

Variable Declaration in Kotlin:

       var variableName:variableType

Instance creation do not require new keyboard as in Java


Variable Declaration in Kotlin:
2 Types:
(1) Using 'var'  : Variable declared using Var can be edited .

(2) Using 'val'  : Variable declared using Val can't be edited .Its Read only


Constructors in Kotlin:
A kotlin class can have single Primary Constructor and multiple secondary constructors.

primary constructor can be declared at class header level

Ex: class Employee(val firstName: String, var age: Int) {
   // class body
}

Secondary Constructor
=====================
secondary constructor is created using the “constructor” keyword.
Required whenever you want to create more than one constructor in Kotlin.
Any number of secondary constructors can be created, however, all of those constructors should call the primary constructor directly or indirectly.

Example:
//Primary Constructor
class HUman(val firstName: String, var age: Int) {
        val message:String  = "Hello!!!"
}

Initialization code in Primary Constructor can be done using init block
class HUman(val firstName: String, var age: Int) {
       
init{
     print("FirstName==$firstName")
}
}
   
   //Secondary Constructor
   constructor(name : String , age :Int ,message :String):this(name,age) {
   }
}





Constructor Overriding:
=========================
class Log {
    constructor(data: String) {
        // some code
    }
    constructor(data: String, numberOfData: Int) {
        // some code
    }
}



class Log {
    constructor(data: String) {
        // code
    }
    constructor(data: String, numberOfData: Int) {
        // code
    }
}

class AuthLog: Log {
    constructor(data: String): super(data) {
        // code
    }
    constructor(data: String, numberOfData: Int): super(data, numberOfData) {
        // code
    }
}




In Kotlin, you can also call a constructor from another constructor of the same class (like in Java) using this().
class AuthLog: Log {
    constructor(data: String): this(data, 10) {
        // code
    }
    constructor(data: String, numberOfData: Int): super(data, numberOfData) {
        // code
    }
}




By default, classes in Kotlin are final.
 If you are familiar with Java, you know that a final class cannot be subclassed. 
By using the open annotation on a class, compiler allows you to derive new classes from it.


Example Inheritence:
open class Person(age: Int) {
    // code for eating, talking, walking
}

class MathTeacher(age: Int): Person(age) {
    // other features of math teacher
}

class Footballer(age: Int): Person(age) {
    // other features of footballer
}

class Businessman(age: Int): Person(age) {
    // other features of businessman
}




open class Person(age: Int, name: String) {
    init {
        println("My name is $name.")
        println("My age is $age")
    }
}

class MathTeacher(age: Int, name: String): Person(age, name) {

    fun teachMaths() {
        println("I teach in primary school.")
    }
}

class Footballer(age: Int, name: String): Person(age, name) {
    fun playFootball() {
        println("I play for LA Galaxy.")
    }
}

fun main(args: Array<String>) {
    val t1 = MathTeacher(25, "Jack")
    t1.teachMaths()

    println()

    val f1 = Footballer(29, "Christiano")
    f1.playFootball()
}


Kotlin Data Class:
There may arise a situation where you need to create a class solely to hold data.
In such cases, you can mark the class as data to create a data class.
Data Classes are immutable.
Although the properties of a data class can be mutable (declared using var), It’s strongly recommended to use immutable properties (declared using val) so as to keep the instances of the data class immutable.

For this class, the compiler automatically generates:

- copy() function, equals() and hashCode() pair, and toString() form of the primary constructor
- componentN() functions


Example of Data Class:

data class Student(val name: String, val place: String, var age: Int)

Creating an Instance of a Data Class
val student: Student = Student("John", "New York", 20)


We can now access the members of Student:
print(student.name) // "John"
print(student.place) // "New York"
print(student.age) // 20




print the contents of the Data class using "toString()" method:
print(student.toString())


Copy() Function:
Since our data classes are immutable, we must create a copy if we wish to change some data.
if we wish to change the age of a student, this can be done by writing:
val student: Student = Student("John", "New York", 20)
val modifiedStudent = student.copy(age = 10)




Kotlin Important Points:
https://www.journaldev.com/20567/kotlin-interview-questions

