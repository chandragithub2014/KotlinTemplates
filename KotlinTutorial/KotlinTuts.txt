Declaring List in Kotlin
var nums = listOf(1,2,3,4)
for(i in nums){ 
println(i)
}

printing index of array list

for((i,e) in nums.withIndex())
{

   println("$i:$e")
}

where i is index
      e is element at that index.



Maps:
====
var aliens = TreeMap<String,Int>()
aliens["abc"]= 654
alines["def"]= 988



fetch from map:
for((name,age) in aliens){
  println("$name:$age") 

}


Functions:
fun add(a:Int,b:Int):Int=a+b
//Without return statement

fun max(a:Int,b:Int):Int = if(a>b) a else b

Changing class name in Kotlin
@file:JvmName("First")

this generates file with name First.class


Convert Double To Int:
return (x*0.04).toInt()

Functions with Default Parameters:
fun calcAmount(amnt:Int,int:Double = 0.02) : Int

callinf function with parameter name specified
calcAmount(amnt=200,int=0.03)


Extension Function  & infix :

infix fun Alien.plus(Alien:a): Alien {
    var newAlien = Alien()
     newAlien.skills = this.skills+" "+a.skills
     return newAlien
    
}

calling this function
 var a1 = Alien();
  a1.skills = "Java"
var a2 = Alien();
a2.skills  = "SQL"

var a3 = a1 plus a2
println(a3.skills)
Note: infix function takes only single parameter

Operator Overloading:

operator infix fun Alien.plus(Alien:a): Alien {
    var newAlien = Alien()
     newAlien.skills = this.skills+" "+a.skills
     return newAlien
    
}


calling this function
 var a1 = Alien();
  a1.skills = "Java"
var a2 = Alien();
a2.skills  = "SQL"

var a3 = a1 + a2
println(a3.skills)



kOTLIN COSTRUCTORS:
Declaration 1:
class Human constructor(var n:String){
  var name:String = n
   fun display(){
    println("Name $name")k 
    }
}

Declaration 2:
class Human(var n:String){
 var name:String =n 
   fun display(){
    println("Name $name")k 
    }
}


Declaration 3:
creating a block in constructor
class Human(var name:String){
  var n:String = ""
  init{
     n = name
    println("Here its Human $n")
   }
 fun display(){
    println("Name $name")k 
    }
}

Secondary Constructor:
class Human(var name:String){
 var age:Int = 0
 var n:String = name
  constructor(age:Int,name:String):this(name){
  this.age = age
  }

}

Inheritence:
When ever u inherit ,u have to use primary constructor of extending class.
Declare a class a open to make it inherited by others.
Declare a method as open to make it override in other class
open class Human
{
  open fun think(){
    println("Real Thinking")
   }
 }

class Alien : Human(){
  
   override fun think(){
      println("Virtual thinking")
    }
}


constructors in inheritence:

open class Human(age:Int)
{
  init{
     println("In Human$age")
   }
  open fun think(){
    println("Real Thinking")
   }
 }

class Alien(age:int) : Human(age){
    init{
        println("In Alien")
    }
   override fun think(){
      println("Virtual thinking")
    }
}


Interfaces:
interface A{
   fun show()
   fun abc(){
    println("abc A")
   }
}

interface B{
   fun display()
  fun abc(){
    println("abc B")
   }
 }

class C:A,B{
  override fun show(){
   println("Show")
   }
   override fun display(){
    println("display")
  }
    override fun abc(){
      super<A>.abc()
   }

}


Object:
To make a class as singleton we need to use object keyword before class
object BookShelf{
  var books = arrayListOf<Book>
}


Refer singleton class
BookShelf.books.add(Book("java",50))


Anonymous Inner Class:
interface Human {
   void think()
 }

 fun main(args:Array<String>){
    var programmer:Human = object:Human 
  {
     override fun think(){ 
       println("thinsk")   
    }
   }
   }